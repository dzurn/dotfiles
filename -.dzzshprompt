#!/bin/zsh

# Modified 2015-07-28 D. Zurn: Removed ibam and apm as neither is found. Updated for CYGWIN.
# Modified 2015-07-28 D. Zurn: Change $RPROMPT from PR_YELLOW to PR_LIGHT_YELLOW for CYGWIN
# Modified 2013-10-16 D. Zurn: Added Reverse triangle to arrow prompt
# Modified 2011-12-22 D. Zurn: Failed rounded-box prompt characters :(
# Modified 2011-07-11 D. Zurn: Updated RPROMPT to accomodate Japanese date format
# Modified 2011-05-06 D. Zurn: changed PR_HBAR to PR_RARROW for prompt

function precmd () {

	local TERMWIDTH
	(( TERMWIDTH = ${COLUMNS} - 1 ))

	###
	# Truncate the path if it's too long.

	PR_FILLBAR=""
	PR_PWDLEN=""

	local promptsize=${#${(%):---(%n@%m:%l)---()--}}
	local pwdsize=${#${(%):-%~}}

	if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]];
	then
		((PR_PWDLEN=$TERMWIDTH - $promptsize))
	else
		PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
	fi

	###
	# Get APM info.

	#	if which ibam > /dev/null;
	#	then
	#		PR_APM_RESULT=`ibam --percentbattery`
	#	elif which apm > /dev/null;
	#	then
	#		PR_APM_RESULT=`apm`
	#	fi

}

setopt extended_glob

function preexec () {
	if [[ "$TERM" == "screen" ]]; 
	then
		local CMD=${1[(wr)^(*=*|sudo|-*)]}
		echo -n "\ek$CMD\e\\"    #### fake closing quote "
	fi
}

function setprompt () {
	###
	# Need this so the prompt will work.
	setopt prompt_subst

	###
	# See if we can use colors.
	autoload colors zsh/terminfo
	if [[ "$terminfo[colors]" -ge 8 ]]; 
	then
		colors
	fi
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; 
	do
		eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
		eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
		(( count = $count + 1 ))
	done
	PR_NO_COLOUR="%{$terminfo[sgr0]%}"

	###
	# See if we can use extended characters to look nicer.

	typeset -A altchar
	set -A altchar ${(s..)terminfo[acsc]}
	PR_SET_CHARSET="%{$terminfo[enacs]%}"
	PR_REVERSE="%{$terminfo[rev]%}"
	PR_SHIFT_IN="%{$terminfo[smacs]%}"
	PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
	PR_HBAR=${altchar[q]:--}
	PR_ULCORNER=${altchar[l]:--}  ## 2011-12-22 D. Zurn: I tried to replace the box characters with down and right
	PR_LLCORNER=${altchar[m]:--}  ## quadrant, but the character spacing was off compared to the HBAR. Selecting
	PR_LRCORNER=${altchar[j]:--}  ## a thick HBAR line drawing character didn't work.
	PR_URCORNER=${altchar[k]:--}  ## For a list of the ACS char set, in the Terminal type "man 5 terminfo"
	PR_RARROW="▶ "

	###
	# Decide if we need to set titlebar text.

	case $TERM in
	xterm*)
		PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
		;;
	screen)
		PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
		;;
	*)
		PR_TITLEBAR=''
		;;
	esac

	###
	# Decide whether to set a screen title
	if [[ "$TERM" == "screen" ]];
	then
		PR_STITLE=$'%{\ekzsh\e\\%}'
	else
		PR_STITLE=''
	fi


	###
	# APM detection

#	if which ibam > /dev/null;
#	then
#		PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
#	elif which apm > /dev/null;
#	then
#		PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
#	else
		PR_APM=''
#	fi


	###
	# Finally, the prompt.
	# It should look like this, imagine linedrawing characters instead of these letters.
	# Also, y'know, colors.
	#   +ó(dzurnlocal@mpaudzurnMac:p1)óóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóóó(~)ó+
	#   +ó(127:10:47:%)óó                                            óó(Thu,Jan03 08!523)ó+

	# Must not have an indent, or the extra whitespace shows up in the prompt!
    PROMPT='$PR_SET_CHARSET\
$PR_STITLE${(e)PR_TITLEBAR}\
$PR_LIGHT_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_LIGHT_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_LIGHT_GREEN\
%(!.%SROOT%s.%n)$PR_LIGHT_GREEN\
@%m:%l$PR_LIGHT_BLUE\
)$PR_SHIFT_IN$PR_HBAR$PR_LIGHT_CYAN$PR_HBAR\
${(e)PR_FILLBAR}$PR_LIGHT_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_LIGHT_MAGENTA\
%$PR_PWDLEN<...<%~%<<$PR_LIGHT_BLUE\
)$PR_SHIFT_IN$PR_HBAR$PR_LIGHT_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_LIGHT_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_LIGHT_BLUE$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_RED\
%?$PR_LIGHT_BLUE\
:)\
${(e)PR_APM}$PR_LIGHT_YELLOW\
%D{%H:%M}$PR_LIGHT_BLUE\
:%(!.$PR_RED.$PR_LIGHT_CYAN)\
%#$PR_LIGHT_BLUE\
)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_LIGHT_CYAN$PR_SHIFT_IN$PR_REVERSE$PR_HBAR$PR_RARROW$PR_SHIFT_OUT$PR_NO_COLOUR '

	# RPROMPT is the left-hand-margin prompt
    RPROMPT=' $PR_LIGHT_CYAN$PR_SHIFT_IN$PR_HBAR$PR_LIGHT_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_LIGHT_YELLOW\
%D{%Y-%m-%f %I:%M}$PR_LIGHT_BLUE\
!%!:p)$PR_SHIFT_IN$PR_HBAR$PR_LIGHT_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

    # PROMPT2 is printed when the shell needs more information
    PROMPT2='$PR_LIGHT_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_LIGHT_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
($PR_LIGHT_GREEN\
%_$PR_LIGHT_BLUE\
)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_LIGHT_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
}

setprompt

# Prompt decoding: http://zsh.sourceforge.net/Doc/Release/zsh_12.html#SEC40
##   %l
##      The line (tty) the user is logged in on, without `/dev/' prefix.
##
##   %m
##      The hostname up to the first `.'.
##
##   %n
##      $USERNAME.
##
##   %#
##      A `#' if the shell is running with privileges, a `%' if not. Equivalent to `%(!.#.%%)'.
##
##   %?
##      The return code of the last command executed just before the prompt.
##
##   %_
##      The status of the parser, i.e. the shell constructs (like `if' and `for') that have been
##      started on the command line. If given an integer number that many strings will be printed;
##      zero or negative or no integer means print as many as there are.
##
##   %~
##      As %d and %/, but if $PWD has a named directory as its prefix, that part is replaced by a `~'
##      followed by the name of the directory. If it starts with $HOME, that part is replaced by a `~'.
##
##   %!
##      Current history event number.
##
##   %S (%s)
##      Start (stop) standout mode.
##
##   %{...%}
##      Include a string as a literal escape sequence. The string within the braces should not
##      change the cursor position. Brace pairs can nest.
##
##   %(x.true-text.false-text)
##       Specifies a ternary expression. A `)' may appear in the false-text as `%)'.
##         !
##             True if the shell is running with privileges.
##         ?
##             True if the exit status of the last command was n.
##
##   %D{string}
##       string is formatted using the strftime function. See man page strftime(3) for more details.
##
##
##   %<string<
##      Specifies truncation behaviour for the remainder of the prompt string. The numeric argument
##      specifies the maximum permitted length of the various strings that can be displayed in the
##      prompt. The string will be displayed in place of the truncated portion of any string; note this
##      does not undergo prompt expansion.
##
##      The forms with `<' truncate at the left of the string. For example, if the current directory is
##      `/home/pike', the prompt `%8<..<%/' will expand to `..e/pike'. If the string is longer than the
##      specified truncation length, it will appear in full, completely replacing the truncated string.
##
##      The part of the prompt string to be truncated runs to the end of the string, or to the end of the
##      next enclosing group of the `%(' construct, or to the next truncation encountered at the same
##      grouping level (i.e. truncations inside a `%(' are separate), which ever comes first. For example,
##      the prompt '%10<...<%~%<<%# ' will print a truncated representation of the current directory,
##      followed by a `%' or `#', followed by a space. Without the `%<<', those two characters would be
##      included in the string to be truncated.
